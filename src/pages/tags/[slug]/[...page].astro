---
import { type Page, type CollectionEntry } from 'astro:content';
import ListWithTagsLayout from "../../../layouts/ListWithTagsLayout.astro";
import { ITEMS_PER_PAGE } from "@/consts";
import tags from '../../../data/tags.json';
import { fetchAndSortBlogPosts, excludeDrafts } from '../../../functions';

interface Props {
    page: Page<CollectionEntry<'blog'>>;
    tag: string;
    slug: string;
}

export async function getStaticPaths({ paginate }) {
  const posts = await fetchAndSortBlogPosts();
  const filteredPosts = posts.filter(excludeDrafts);

  const allTags = [...new Set(filteredPosts.flatMap((post) =>
    Array.isArray(post.tags) ? post.tags : [post.tags]
  ))];

  const paths = allTags.flatMap((tag) => {
    const tagPosts = filteredPosts.filter((post) =>
      (Array.isArray(post.tags) ? post.tags : [post.tags]).includes(tag)
    );

    const paginated = paginate(tagPosts, {
      pageSize: ITEMS_PER_PAGE,
      params: { slug: tag }
    });

    return paginated.map((p, index) => {
      const pageNum = index + 1;
      return {
        params: {
          slug: tag,
          ...(pageNum === 1 ? {} : { page: String(pageNum) })
        },
        props: {
          page: p.props.page,
          tag
        }
      };
    });
  });

  return paths;
}

const { page, tag } = Astro.props;
const tagData = tags[tag.toLowerCase()];

if (!tagData) {
  console.error(`Tag data not found for: ${formattedTagId}`);
} else {
  console.log(`Tag data: ${JSON.stringify(tagData, null, 2)}`);
}

export const prerender = true;

---
<ListWithTagsLayout title={`Posts tagged with "${tagData?.name || 'Unknown'}"`} page={page} description={tagData?.description || ''}>
</ListWithTagsLayout>