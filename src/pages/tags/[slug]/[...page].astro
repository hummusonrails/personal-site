---
import { getCollection, getEntry } from "astro:content";
import ListWithTagsLayout from "../../../layouts/ListWithTagsLayout.astro";
import { ITEMS_PER_PAGE } from "@/consts";

interface Props {
  page: {
    data: {
      slug: string;
      data: {
        title: string;
        summary: string;
        date: Date;
        tags: ({ collection: "tags"; slug: string } | string)[];
      };
    }[];
    url: {
      next: string | null;
      prev: string | null;
    };
  };
  slug: string;
}

const { slug, page } = Astro.props;

// Look up tag data from content collection
const tagEntry = await getEntry("tags", slug);
const tagData = tagEntry?.data;

export async function getStaticPaths({ paginate }) {
  const posts = await getCollection("blog");
  const filteredPosts = posts.filter((post) => !post.data.draft);

  // Flatten and collect all tag slugs used
  const tagSet = new Set<string>();
  for (const post of filteredPosts) {
    for (const tag of post.data.tags || []) {
      const slug = typeof tag === "string" ? tag : tag.slug;
      tagSet.add(slug);
    }
  }

  const paths = Array.from(tagSet).flatMap((tagSlug) => {
    const tagPosts = filteredPosts
      .filter((post) =>
        (post.data.tags || []).some((tag) =>
          typeof tag === "string" ? tag === tagSlug : tag.slug === tagSlug
        )
      )
      .sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime()) // âœ… newest first
      .map((post) => ({
        slug: post.slug,
        data: post.data,
      }));

    return paginate(tagPosts, {
      pageSize: ITEMS_PER_PAGE,
      params: { slug: tagSlug },
      props: { slug: tagSlug },
    });
  });

  return paths;
}

export const prerender = true;
---
<ListWithTagsLayout
  title={`Posts tagged with "${tagData?.name || slug}"`}
  description={tagData?.description || ''}
  page={page}
/>
