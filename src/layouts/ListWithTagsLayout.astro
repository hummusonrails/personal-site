---
import { getCollection } from "astro:content";
import Link from "../components/Link.astro";
import Pagination from "../components/Pagination.astro";
import RootLayout from "./RootLayout.astro";
import Tag from "../components/Tag.astro";
import FormattedDate from "../components/FormattedDate.astro";

interface PageData {
  data: {
    slug: string;
    data?: {
      date: Date;
      title: string;
      summary: string;
      tags: ({ collection: "tags"; slug: string } | string | undefined)[];
    };
  }[];
  url: {
    next: string | null;
    prev: string | null;
  };
}

interface Props {
  title: string;
  description: string;
  page: PageData;
}

const { title, description, page } = Astro.props;
const hasDefaultSlot = Astro.slots.has("default");
const isBlogPage = Astro.url.pathname.startsWith("/blog");

// Fetch all blog posts and exclude drafts
const allPosts = await getCollection("blog");
const filteredPosts = allPosts.filter((post) => !post.data.draft);

// Count tag occurrences
const tagCounts: Record<string, number> = {};
for (const post of filteredPosts) {
  const postTags = post.data.tags || [];
  for (const tag of postTags) {
    const tagSlug =
      typeof tag === "string"
        ? tag.toLowerCase()
        : tag && typeof tag === "object" && "slug" in tag
        ? tag.slug.toLowerCase()
        : null;

    if (!tagSlug) {
      console.warn("⚠️ Invalid tag in post:", post.slug, "→", tag);
      continue;
    }

    tagCounts[tagSlug] = (tagCounts[tagSlug] || 0) + 1;
  }
}

function isSamePath(path: string) {
  return Astro.url.pathname === path;
}

export const prerender = true;

// Load all tags
const tagsCollection = await getCollection("tags");
---

<RootLayout {title} {description}>
  <div class="section-container animate-fade-in">
    <div class="max-w-7xl mx-auto">
      <div class="mb-12">
        <p class="section-title">Blog</p>
        <h1 class="text-4xl md:text-5xl font-bold mb-4">
          {title}
        </h1>
        {hasDefaultSlot && (
          <div class="prose text-dark-text-secondary py-4">
            <slot />
          </div>
        )}
      </div>

      <div class="flex flex-col lg:flex-row gap-8">
        <!-- Sidebar -->
        <aside class="lg:w-64 flex-shrink-0">
          <div class="card sticky top-4">
            <h3 class="font-semibold mb-4 text-lg">
              {isBlogPage ? (
                <span>All Posts</span>
              ) : (
                <Link href="/blog" class="modern-link">All Posts</Link>
              )}
            </h3>

            <div class="space-y-1">
              {tagsCollection.map(({ slug, data }) => {
                const count = tagCounts[slug.toLowerCase()] || 0;
                return (
                  <div key={slug}>
                    {isSamePath(`/tags/${slug}`) ? (
                      <div class="text-primary-500 font-medium py-2 px-3 bg-dark-surface rounded">
                        {data.name} ({count})
                      </div>
                    ) : (
                      <Link
                        href={`/tags/${slug}`}
                        class="block py-2 px-3 text-dark-text-secondary hover:text-white hover:bg-dark-surface rounded transition-colors no-underline"
                        aria-label={`View posts tagged ${data.name}`}
                      >
                        {data.name} ({count})
                      </Link>
                    )}
                  </div>
                );
              })}
            </div>
          </div>
        </aside>

        <!-- Main Content -->
        <div class="flex-1 min-w-0">
          <div class="space-y-8">
            {page?.data?.map((entry) => {
              const post = entry.data;
              if (!post) return null;

              return (
                <article class="card hover:border-primary-500 transition-all group" key={entry.slug}>
                  <div class="space-y-4 md:grid md:grid-cols-4 md:gap-6 md:space-y-0">
                    <div class="md:col-span-1">
                      <time class="text-sm text-dark-text-muted font-mono">
                        <FormattedDate date={post.date} />
                      </time>
                    </div>
                    <div class="md:col-span-3 space-y-3">
                      <div>
                        <h2 class="text-2xl font-bold mb-3 group-hover:text-primary-500 transition-colors">
                          <Link href={`/blog/${entry.slug}`} class="no-underline">
                            {post.title}
                          </Link>
                        </h2>
                        <div class="flex flex-wrap gap-2">
                          {post.tags
                            .map((tag) => {
                              if (typeof tag === "string") return tag;
                              if (tag && typeof tag === "object" && "slug" in tag) return tag.slug;
                              console.warn("⚠️ Tag not found or slug missing:", tag);
                              return null;
                            })
                            .filter(Boolean)
                            .map((slug) => (
                              <Tag slug={slug} key={slug} />
                            ))}
                        </div>
                      </div>
                      <p class="text-dark-text-secondary leading-relaxed">
                        {post.summary}
                      </p>
                    </div>
                  </div>
                </article>
              );
            }) || (
              <div class="card text-center py-12">
                <p class="text-dark-text-secondary">No posts found</p>
              </div>
            )}
          </div>

          {(page?.url?.next || page?.url?.prev) && (
            <div class="mt-12">
              <Pagination page={page} />
            </div>
          )}
        </div>
      </div>
    </div>
  </div>
</RootLayout>
