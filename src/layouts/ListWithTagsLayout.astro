---
import { getCollection } from "astro:content";
import Link from "../components/Link.astro";
import Pagination from "../components/Pagination.astro";
import RootLayout from "./RootLayout.astro";
import Tag from "../components/Tag.astro";
import FormattedDate from "../components/FormattedDate.astro";

interface PageData {
  data: {
    slug: string;
    data?: {
      date: Date;
      title: string;
      summary: string;
      tags: ({ collection: "tags"; slug: string } | string | undefined)[];
    };
  }[];
  url: {
    next: string | null;
    prev: string | null;
  };
}

interface Props {
  title: string;
  description: string;
  page: PageData;
}

const { title, description, page } = Astro.props;
const hasDefaultSlot = Astro.slots.has("default");
const isBlogPage = Astro.url.pathname.startsWith("/blog");

// Fetch all blog posts and exclude drafts
const allPosts = await getCollection("blog");
const filteredPosts = allPosts.filter((post) => !post.data.draft);

// Count tag occurrences
const tagCounts: Record<string, number> = {};
for (const post of filteredPosts) {
  const postTags = post.data.tags || [];
  for (const tag of postTags) {
    const tagSlug =
      typeof tag === "string"
        ? tag.toLowerCase()
        : tag && typeof tag === "object" && "slug" in tag
        ? tag.slug.toLowerCase()
        : null;

    if (!tagSlug) {
      console.warn("⚠️ Invalid tag in post:", post.slug, "→", tag);
      continue;
    }

    tagCounts[tagSlug] = (tagCounts[tagSlug] || 0) + 1;
  }
}

function isSamePath(path: string) {
  return Astro.url.pathname === path;
}

export const prerender = true;

// Load all tags
const tagsCollection = await getCollection("tags");
---

<RootLayout {title} {description}>
  <div class="retro-container">
    <pre class="ascii-divider">
 /========================\
 |     SYSTEM ARCHIVE     |
 \========================/
    </pre>

    <div class="pb-6 pt-6 border-b border-terminal-green">
      <h1 class="text-3xl font-mono text-terminal-bright">
        > {title}
      </h1>
      {hasDefaultSlot && (
        <div class="prose font-mono text-terminal-green py-4">
          <slot />
        </div>
      )}
    </div>

    <div class="flex gap-6">
      <div class="hidden sm:block min-w-[280px] border-r border-terminal-green p-4">
        <div class="sticky top-4">
          {isBlogPage ? (
            <h3 class="text-terminal-bright font-mono">> ALL_POSTS</h3>
          ) : (
            <Link href="/blog" class="retro-link">ALL_POSTS</Link>
          )}

          <ul class="mt-4 space-y-2">
            {tagsCollection.map(({ slug, data }) => {
              const count = tagCounts[slug.toLowerCase()] || 0;
              return (
                <li key={slug}>
                  {isSamePath(`/tags/${slug}`) ? (
                    <h3 class="text-terminal-bright font-mono">
                      > {data.name} [{count}]
                    </h3>
                  ) : (
                    <Link
                      href={`/tags/${slug}`}
                      class="retro-link"
                      aria-label={`View posts tagged ${data.name}`}
                    >
                      {data.name} [{count}]
                    </Link>
                  )}
                </li>
              );
            })}
          </ul>
        </div>
      </div>

      <div class="flex-1">
        <ul class="divide-y divide-terminal-dim">
          {page?.data?.map((entry) => {
            const post = entry.data;
            if (!post) return null;

            return (
              <li class="py-5" key={entry.slug}>
                <article class="space-y-4">
                  <dl>
                    <dt class="sr-only">Published on</dt>
                    <dd class="font-mono text-terminal-dim">
                      > DATE: <FormattedDate date={post.date} />
                    </dd>
                  </dl>
                  <div class="space-y-3">
                    <div>
                      <h3 class="text-2xl font-mono">
                        <Link href={`/blog/${entry.slug}`} class="retro-link">
                          {post.title}
                        </Link>
                      </h3>
                      <div class="flex flex-wrap gap-2 mt-2">
                        {post.tags
                          .map((tag) => {
                            if (typeof tag === "string") return tag;
                            if (tag && typeof tag === "object" && "slug" in tag) return tag.slug;
                            console.warn("⚠️ Tag not found or slug missing:", tag);
                            return null;
                          })
                          .filter(Boolean)
                          .map((slug) => (
                            <Tag slug={slug} key={slug} />
                          ))}
                      </div>
                    </div>
                    <div class="font-mono text-terminal-green">
                      {post.summary}
                    </div>
                  </div>
                </article>
              </li>
            );
          }) || (
            <p class="text-terminal-dim font-mono">
              ERROR: Invalid page data.
            </p>
          )}
        </ul>

        {(page?.url?.next || page?.url?.prev) && (
          <div class="border-t border-terminal-green p-4">
            <Pagination page={page} />
          </div>
        )}
      </div>
    </div>
  </div>
</RootLayout>
